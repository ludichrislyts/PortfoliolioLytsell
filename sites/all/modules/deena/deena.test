<?php
class DeenaTestCase extends DrupalUnitTestCase
{
    public static function getInfo()
    {
        return array(
          'name' => 'Deena String Tests',
          'description' => 'Test that strings being properly entered and processed.',
          'group' => 'Tests',
        );
    }

    function testDeena()
    {
        //English description
        //displays desired result during test
        $description = 'A single correct letter is reflected';
        //Arrange
        //create input
        $input = 'G';
        //Act
        //run the function we're testin gwith input and store output in $result.
        $result = getDNAstring($input);
        //Assert
        //This time we're using assertEqual
        //If the first argument == second argument, test passes
        //Again pass in $description for display.
        $expected_output = 'G, C';
        $this->assertEqual($result, $expected_output, $description);
        /*----------------------------------------------------------------*/
        $description = 'Two letter correct input should be refected back';
        //Arrange
        $input = 'GC';
        //Act
        $result = getDNAstring($input);
        //Assert
        $expected_output = 'GC, CG';
        $this->assertEqual($result, $expected_output, $description);
        /*----------------------------------------------------------------*/
        $description = 'Multiple letter correct input should be refected back';
        //Arrange
        $input = 'GCTACG';
        //Act
        $result = getDNAstring($input);
        //Assert
        $expected_output = 'GCTACG, CGATGC';
        $this->assertEqual($result, $expected_output, $description);
        /*----------------------------------------------------------------*/
        $description = 'Single letter bad input doesn\'t pass';
        //Arrange
        $test = array(
            '#value' => 'f'
        );
        //Act
        $result = validate_entry($test);
        //Assert
        $expected_output = form_set_error("Valid DNA letters are 'A', 'C', 'G', or 'T' (capitalized, please)");
        $this->assertEqual($result, $expected_output, $description);
        /*----------------------------------------------------------------*/
        $description = 'Test for valid entry passing the validation';
        //Arrange
        $test = array(
            '#value' => 'AGCT'
        );
        //Act
        $result = validate_entry($test);
        //Assert
        $expected_output = true;
        $this->assertEqual($result, $expected_output, $description);
        /*----------------------------------------------------------------*/

        // $description = 'A title with one word instead of one letter should be capitalized.';
        // $input = 'thor';
        // $result = make_title_case($input);
        // $expected_output = 'Thor';
        // $this->assertEqaul($result, $expected_output, $description);
        //
        // $description = 'A title with multiple words should be capitalized.';
        // $input = 'mad max';
        // $result = make_title_case($input);
        // $expected_output = 'Mad Max';
        // $this->assertEqual($result, $expected_output, $description);
        //
        // $description = 'Titles which start with a small word should still have that first word be capitalized.';
        // $input = 'a clockwork orange';
        // $result = make_title_case($input);
        // $expected_output = 'A Clockwork Orange';
        // $this->assertEqual($result, $expected_output, $description);
        //
        // $description = 'A title with multiple words, some of which are small, should be put into title case.';
        // $input = 'the lord of the rings';
        // $result = make_title_case($input);
        // $expected_output = 'The Lord of the Rings';
        // $this->assertEqual($result, $expected_output, $description);

        //T
    }
}
